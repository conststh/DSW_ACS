@startuml
!theme plain
skinparam linetype ortho
skinparam packageStyle rect
skinparam classAttributeIconSize 0

title Access Control System - UML Diagram

package "Server" {
  class Main {
    {static} +main(args: String[]): void
  }

  class WebServer {
    -PORT: int
    +WebServer()
  }

  class SocketThread <<inner class>> {
    -insocked: Socket
    +run(): void
    -makeRequest(tokens: String[]): Request
  }

  Main -right-> WebServer : creates >
  WebServer +-- SocketThread
}

package "Requests" {
  interface Request {
    +process(): void
    +answerToJson(): JSONObject
  }

  class RequestReader implements Request {
    -credential: String
    -action: String
    -doorId: String
  }
  class RequestArea implements Request {
    -credential: String
    -action: String
    -areaId: String
  }
  class RequestRefresh implements Request {}
}

package "Managers (Singletons & Static Classes)" {
  class DirectoryAreas <<Singleton>> {
    -instance: DirectoryAreas
    -rootArea: Area
    -allDoors: Door[]
    +getInstance(): DirectoryAreas
    +findAreaById(id: String): Area
    +findDoorById(id: String): Door
  }

  class DirectoryDoors {
    {static} -allDoors: Door[]
    {static} +makeDoors(): void
    {static} +findDoorById(id: String): Door
    {static} +getAllDoors(): Door[]
  }

  class DirectoryUserGroups {
    {static} -userGroups: UserGroup[]
    {static} +makeUserGroups(): void
    {static} +findGroupByName(name: String): UserGroup
  }

  class DirectoryUsers {
    {static} -users: User[]
    {static} +makeUsers(): void
    {static} +findUserByCredential(credential: String): User
  }
}

package "Domain Model" {
  package "Building Structure (Composite)" {
    abstract class Area {
      #id: String
      {abstract} +getSpaces(): Space[]
      {abstract} +getDoorsGivingAccess(): Door[]
      {abstract} +findAreaById(id: String): Area
    }

    class Partition extends Area {
      -children: Area[*]
      +add(area: Area): void
    }

    class Space extends Area {
      -doors: Door[*]
      +addDoor(door: Door): void
    }

    class Door {
      -id: String
      -closed: boolean
      -state: DoorState
      -fromSpace: Space
      -toSpace: Space
      +setState(state: DoorState): void
      +processRequest(req: RequestReader): void
      -doAction(action: String): void
    }

    Area <|-- Partition
    Area <|-- Space
    Partition "1" o-- "*" Area : contains
    Space "1" o-- "*" Door : has access doors
    Door "1" -- "1" Space : "from"
    Door "1" -- "1" Space : "to"
  }

  package "Door State (State)" {
    abstract class DoorState {
      #door: Door
      {abstract} +getStateName(): String
      {abstract} +open(): void
      {abstract} +close(): void
      {abstract} +lock(): void
      {abstract} +unlock(): void
      {abstract} +unlockShortly(): void
    }

    class Unlocked extends DoorState {}
    class Locked extends DoorState {}
    class Propped extends DoorState {}
    class UnlockedShortly extends DoorState {}

    Door "1" o-- "1" DoorState : has state >
    DoorState ..> Door : knows
    Locked ..> Unlocked : <<creates>>
    Locked ..> UnlockedShortly : <<creates>>
    Unlocked ..> Locked : <<creates>>
    Propped ..> Locked : <<creates>>
  }

  package "Users & Permissions" {
    class User {
      -name: String
      -credential: String
      -nameGroup: String
      +canBeInSpace(space: Space): boolean
      +canSendRequests(time: LocalDateTime): boolean
      +canDoAction(action: String): boolean
    }

    class UserGroup {
      -name: String
      -users: User[]
      -authorizedActions: String[]
      -authorizedAreas: Area[]
      -schedule: Schedule
      +addUser(user: User): void
    }

    class Schedule {
      -startTime: LocalTime
      -endTime: LocalTime
      -allowedWeekdays: DayOfWeek[]
      +isTimeAuthorized(time: LocalDateTime): boolean
    }

    UserGroup "1" o-- "*" User : contains
    UserGroup "1" -- "1" Schedule : has
    UserGroup "1" -- "*" Area : has permissions for
  }

  class Actions {
    {static} +LOCK: String
    {static} +UNLOCK: String
    {static} +UNLOCK_SHORTLY: String
    {static} +OPEN: String
    {static} +CLOSE: String
  }
}

' Inter-package relationships
Main ..> DirectoryDoors : <<initializes>>
Main ..> DirectoryUsers : <<initializes>>

SocketThread ..> Request : <<creates>>
RequestReader ..> DirectoryDoors : <<uses>>
RequestReader ..> DirectoryUsers : <<uses>>
RequestArea ..> DirectoryAreas : <<uses>>
RequestArea ..> DirectoryUsers : <<uses>>

DirectoryDoors ..> DirectoryAreas : <<uses>>
DirectoryUsers ..> DirectoryUserGroups : <<uses>>
User ..> DirectoryUserGroups : <<uses>>

Door ..> Actions : <<uses>>
Door ..> RequestReader : <<uses>>
@enduml